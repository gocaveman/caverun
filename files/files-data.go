// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package files

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// EmbeddedAssets statically implements the virtual filesystem provided to vfsgen.
var EmbeddedAssets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2018-08-24T01:44:15Z"),
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: mustUnmarshalTextTime("2018-08-24T01:44:22Z"),
		},
		"/static/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          mustUnmarshalTextTime("2018-08-24T05:10:08Z"),
			uncompressedSize: 5084,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x6d\x6f\xdc\xb8\x11\xfe\x2c\xfd\x8a\x89\x7c\xa8\xd6\xc8\x4a\x5a\xdb\x9b\x97\x6e\x24\x35\xd7\x24\x77\xe8\x87\xa2\x87\xa6\x38\xe0\x50\x14\x06\x45\x8d\xb4\x8c\xb9\xa4\x4a\x52\x5a\x1b\xae\xff\x7b\x41\xea\xc5\xfb\x92\xb8\x69\x92\x73\xfc\xc1\x2b\x3d\x33\x9c\x19\x0e\x87\x7c\x38\x4a\x9f\xbc\xfd\xdb\x9b\x7f\xfc\xf6\xcb\x3b\x58\x9b\x0d\xcf\xfd\x74\xfc\x41\x52\xe6\xbe\x97\x1a\x66\x38\xe6\x94\x74\xa8\x5a\x91\x26\xfd\xab\xef\x03\x00\xa4\x9c\x89\x2b\x50\xc8\xb3\x40\x9b\x1b\x8e\x7a\x8d\x68\x02\x30\x37\x0d\x66\x81\xc1\x6b\x93\x50\xad\x03\x58\x2b\xac\xb2\x60\x6d\x4c\xa3\x57\x49\x52\x49\x61\x74\x5c\x4b\x59\x73\x24\x0d\xd3\x31\x95\x1b\xab\xf7\xa7\x8a\x6c\x18\xbf\xc9\xfe\x2e\x0b\x69\xe4\xea\x62\xb1\x98\x2f\x17\x8b\xf9\xb3\xc5\x62\xfe\x62\xb1\xf8\xcf\x5f\x89\x41\xc5\x08\x7f\xfa\x17\x2a\x85\x0e\xf2\x2f\x0f\xa0\x15\xcd\x55\xed\xbc\x76\x2d\x1a\x56\xdd\xbc\x3e\x8b\xcf\xe2\xb3\x65\x52\x32\x6d\x46\x2c\xde\x30\x11\xdb\xc1\xb9\xef\xa7\xce\x76\xee\x9f\x90\xa6\x81\xb8\x8b\x8c\x94\xbc\x20\xea\xf2\x92\x4a\x61\x50\x18\xb8\xf5\xbd\x82\xd0\xab\x5a\xc9\x56\x94\x2b\x38\x59\xbe\x3b\xfb\xf1\xfc\xed\x2b\xff\x6e\x1a\x52\x49\x69\x50\x3d\xa0\x98\x26\x83\x13\x3f\x4d\xfa\xcc\xa7\x85\x2c\x6f\xec\x7b\xc9\x3a\x60\x65\x16\x90\xa6\x71\xd3\x4e\xbb\xc8\x5a\xb5\x10\x13\xba\x61\x0a\xc7\x6c\x74\x91\x20\x1d\xab\x89\x61\x52\x44\xa5\x22\x5b\x54\x4e\x00\x50\xb1\x6b\x2c\x87\xe7\x2e\xda\xc8\xd2\xa6\xac\xd7\x08\x06\x78\x23\x0b\xc6\x31\x2a\x14\x92\xab\xa8\x91\x4c\x98\x2c\x58\x2e\x16\xa3\x98\x72\xd6\x34\x93\x0d\xd2\x34\xee\x29\x1f\xde\xd3\x27\x51\x04\x1b\x26\x58\xd4\x11\xc5\x88\x30\x10\x45\x93\xac\x8b\x38\xd3\x66\xa8\x99\x1d\x24\x32\x8c\x23\xbc\xa6\x9c\xd1\xab\x2c\xd0\x54\x21\x8a\x2c\x2c\x5a\xc6\xcb\x30\xc8\x27\xed\x7d\xfd\x88\x50\x3b\xbd\x5d\xb1\x53\x60\x54\x0a\xe0\x44\xd5\x98\x3b\x0b\x69\xd2\x63\x7b\x76\x92\x87\x0d\xed\xf9\x19\x16\xf7\xc8\xd1\xbd\x46\xbf\x15\xfe\x3c\x7a\x3b\x14\x7c\xd2\xf1\x91\xe5\x3d\xf1\xe7\xe6\xa9\x96\x97\x35\x0a\x54\xc4\xe0\x57\x65\x8b\x89\xa6\x35\x8f\x96\xad\x9f\x25\xfc\x3c\x44\xfd\x1d\x72\x66\x4f\xb1\x1a\xc5\x57\xe5\x4b\x56\x15\x67\x02\x2f\x0b\xc9\x1f\x2f\x6d\x6f\xfa\xc0\xbf\x47\x99\x31\xf3\x55\xe9\x52\xa8\x8d\x54\xf8\x78\x05\xc6\xcc\x77\xc8\x92\x46\x63\x98\xa8\xf5\x57\xa5\x6a\x34\xf2\x68\xb9\x7a\xbf\xe3\xf0\x5b\x27\x6c\x44\x07\x6a\x4a\x3e\xc2\x4d\x13\x6b\x0d\x84\x0a\x54\x72\xa9\x2c\xab\x95\xac\x96\x01\x94\x44\x5d\xf5\xcc\x65\xf9\x66\x64\xa0\x88\x63\x75\x4f\x26\xf7\xa3\x23\xcd\x4a\xec\xd3\xd9\xaf\x4e\xac\x8d\x6c\x46\x96\x83\x0c\x9e\x0c\x7c\x97\xdb\x60\x8e\x06\xe5\xc7\x06\xef\x6f\x3e\x29\x6e\x72\x77\xfb\xc1\xcd\xde\xe8\xf1\x32\xe4\xb9\x71\xba\x21\x14\x95\x53\x18\x1e\x9d\xc4\xfe\x79\x69\x17\x15\x46\xc0\x4e\x78\xf7\xc5\xb3\x45\x4e\xe5\xc6\x9d\xe2\xa3\xba\x37\x54\x46\x4e\xca\xf2\xb2\x90\xd7\xf7\x25\x31\x19\x4c\x9c\xc5\xd1\xc5\xe8\xa0\xe2\xc4\xe4\xbe\xe7\x39\x0b\x1a\x39\x52\xe3\x7b\xde\xfd\x5a\xae\x98\xc1\x8d\xce\x02\xf7\x13\xec\x89\x38\x29\xec\xad\xe0\x17\x25\x3f\x20\x35\xbb\xb2\x7e\x4a\xce\x58\x3e\xba\xdb\x77\xff\x3f\x66\x38\xdc\x1e\xed\x85\xa9\x62\xf5\x47\x27\x3a\x16\xff\x25\x69\x1a\xce\xa8\xab\x13\xfd\xd0\xb4\xc7\xb2\x1a\xd6\x62\x2a\xa6\xa9\x3e\xef\x17\xd4\x42\x84\x09\x54\x50\xf1\x96\x95\x50\x31\xce\xa3\x35\xb2\x7a\x6d\xa0\x8b\x58\x35\x05\xba\xb7\x16\x83\xc7\x01\x81\x5e\x65\xa7\xba\x27\xab\x93\xea\x17\x79\x3c\xb8\xef\x78\xee\xfd\x41\x6f\x5f\xe4\xe6\xa3\xd7\x05\xaf\x96\x30\xa2\xdf\xde\xe5\x11\xdb\x7a\x03\xf2\x3b\xcc\x6e\x97\xa5\xbc\x9a\x99\x6f\xef\xe2\xf8\x88\xf7\x9a\x7e\xab\xc0\x28\xfa\x7d\x52\xb8\xbf\x71\x06\xd7\xb2\x43\x45\x38\x87\x41\x01\x7a\x85\x56\xb9\x7d\xf3\x70\x1c\xee\xae\x0e\x00\x9f\x15\xd0\x18\xb7\x65\x0f\x72\x23\x5b\xb3\xc3\x0b\x1f\x5a\x6d\x5b\xa5\x88\xa2\x30\x53\xa7\x61\xff\x08\x67\xb5\x38\x84\x0f\xd8\xaa\xe2\x78\x0d\xb6\x45\x8b\xae\xf5\xa0\x7a\xc4\x57\x76\x6b\x1b\xd6\x40\x7f\xe2\x03\x1c\x88\xa7\xe3\xc6\xd1\x27\xac\xfa\x36\x4f\xcb\x56\x51\x0c\xc0\x58\xd0\x64\xc1\x65\xc1\x89\xb8\x0a\x40\x73\x69\xb2\xc0\x32\x67\x47\x8c\x54\xc1\xa1\xc1\x43\x36\xa6\xb2\xfc\xe8\xad\x65\x4c\xa9\x3b\x85\x0e\x60\xdd\x10\x91\xbf\x77\x01\xa4\x89\x7b\xf1\x0f\x87\x0d\x73\x3a\xe4\x57\x9b\x8e\x03\x4a\x75\xe9\xce\x3f\x55\x4c\xb6\xbf\xf2\x77\x25\x13\x27\xa7\x53\xbb\x49\x9a\xc9\x8f\x0b\x0d\x28\x27\x5a\x67\xc1\x76\xcd\x0c\x46\x91\xcd\x7e\x90\xff\x41\x14\xba\x79\x35\xfc\xa7\xb2\xb9\x79\x05\x3f\xdc\xd2\x56\x29\x14\xe6\x37\x24\xea\x6e\x77\x26\x2e\x54\x67\xdc\x75\xa2\x89\x6b\x45\x73\x3f\x4d\x4a\xd6\xb9\x4e\x99\x2a\xd6\x18\xd0\x8a\x7e\xa2\xdf\x7e\x7d\x1e\x3f\x8b\xcf\x5e\x4c\xbd\x76\xfc\x41\x5b\x42\xee\xc7\xe5\x9f\x61\xe0\xfa\xf5\x45\xbc\x88\xcf\x26\x03\xd7\xff\xb7\x85\x07\x5b\xfe\x7d\x63\xa3\xb5\xdc\x67\x15\xcc\xb6\x4c\x94\x72\x1b\x73\xd9\xb3\x53\xbc\x26\x7a\x0d\x59\x06\xc1\x49\xc5\x14\x16\x6d\x1d\x9c\xda\x0e\xbf\x94\xb4\xdd\xa0\x30\xf1\x56\x31\x83\x5c\xcc\xc2\x31\xa6\x9d\xef\x12\x1f\x48\x47\x7a\x34\xd8\x0f\xb5\x46\x33\x58\x73\xf1\x0e\xcf\x11\x67\x66\xc8\x55\xf8\x34\x4c\xc2\xa7\xa1\xa6\xe1\xd3\xd0\xc5\x16\x9e\x0e\x1f\x10\x8e\x82\xf6\x93\x04\x4a\x89\x5a\x84\x06\xb6\x52\x5d\x41\x04\x0a\xff\xdd\x32\x85\x1a\xcc\x1a\x41\xa3\xea\x50\x81\xbd\x03\x81\x36\x6d\x55\xc5\x71\x0c\x85\x2d\x7f\x3b\xf2\xd7\x16\xe3\x56\xe3\xec\xd7\x3e\x3d\x73\xb8\xb5\xa8\x67\xd6\xb8\xc1\xd5\xf0\xe2\x35\x8a\x6d\x88\xba\x59\x41\x70\xf2\xf2\xe5\xe2\xdd\xf2\xa7\x60\xde\x0b\x34\x52\x29\xca\x41\xf4\xe3\xdb\xb3\xe5\xb3\x17\xa3\x88\x50\xbb\xdf\x2d\xfe\xe6\xf9\xf9\xcb\xf3\x97\x23\x8e\x4a\x49\x65\xe1\x6a\xb9\xbc\xb8\x78\x3e\xc2\x5b\xa2\x04\x13\xb5\x13\x54\x58\x5c\x14\xa3\x80\x89\x4a\x5a\xf4\xfc\xec\x8f\xcf\xab\x8b\xc9\x71\x4b\x29\x6a\x6d\x05\x4b\x4a\xaa\x67\x8b\xc0\xe1\x77\x4e\x7c\x77\xfa\xca\xf7\xa9\x14\x5a\x72\x8c\xb9\xac\x67\xc1\x7b\x43\x94\x3d\xbc\xed\x66\x89\xe3\x38\x38\xf5\xfd\x8e\xb8\xad\x73\xd9\xb5\x08\x19\x08\xdc\xda\x54\xcc\xec\xca\x22\x67\x1b\x66\x50\xe9\x15\xfc\x33\xfc\xe1\x36\x9c\x87\x77\xe1\xbf\xe6\xbe\x87\x7c\x05\xe1\x09\x69\x9a\x70\xee\x7b\x25\x31\x64\x05\xb3\x53\xc8\x72\x98\xdd\xba\x6d\xe3\xf5\x57\xcf\x15\x88\x96\xf3\x79\x0f\xed\x6c\xb1\x95\x73\xf2\x96\x18\x9c\x9d\xc6\x35\x9a\x9f\x5a\xce\x2d\x3e\x3b\x1d\x74\xfb\xf3\x7c\x05\xd3\xf5\xc4\xe2\xde\xdd\xa9\xef\xe6\xb3\xbb\xf4\x49\xff\xd5\x28\x4d\xdc\x57\xbc\xff\x06\x00\x00\xff\xff\x6a\x93\x08\x79\xdc\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
